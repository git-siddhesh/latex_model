  0%|                                                                               | 0/13 [00:00<?, ?it/s]/home/dosisiddhesh/miniconda3/envs/mist3_env/lib/python3.10/site-packages/torch/utils/checkpoint.py:460: UserWarning: torch.utils.checkpoint: please pass in use_reentrant=True or use_reentrant=False explicitly. The default value of use_reentrant will be updated to be False in the future. To maintain current behavior, pass use_reentrant=True. It is recommended that you use use_reentrant=False. Refer to docs for more details on the differences between the two variants.
  warnings.warn(








 77%|█████████████████████████████████████████████████████▊                | 10/13 [01:04<00:23,  7.81s/it]Traceback (most recent call last):
  File "/home/dosisiddhesh/latex_model/script/v2_mp_mistral.py", line 269, in <module>
    train_result = trainer.train()
  File "/home/dosisiddhesh/miniconda3/envs/mist3_env/lib/python3.10/site-packages/transformers/trainer.py", line 1539, in train
    return inner_training_loop(
  File "/home/dosisiddhesh/miniconda3/envs/mist3_env/lib/python3.10/site-packages/optimum/intel/openvino/trainer.py", line 606, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
  File "/home/dosisiddhesh/miniconda3/envs/mist3_env/lib/python3.10/site-packages/transformers/trainer.py", line 2781, in training_step
    self.accelerator.backward(loss)
  File "/home/dosisiddhesh/miniconda3/envs/mist3_env/lib/python3.10/site-packages/accelerate/accelerator.py", line 1966, in backward
    loss.backward(**kwargs)
  File "/home/dosisiddhesh/miniconda3/envs/mist3_env/lib/python3.10/site-packages/torch/_tensor.py", line 522, in backward
    torch.autograd.backward(
  File "/home/dosisiddhesh/miniconda3/envs/mist3_env/lib/python3.10/site-packages/torch/autograd/__init__.py", line 266, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.27 GiB. GPU 0 has a total capacity of 31.74 GiB of which 2.64 GiB is free. Including non-PyTorch memory, this process has 29.09 GiB memory in use. Of the allocated memory 26.88 GiB is allocated by PyTorch, and 1.83 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)